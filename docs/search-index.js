var searchIndex = JSON.parse('{\
"concurrency":{"doc":"","t":"WHFFFFFF","n":["","GLOBAL","__rg_alloc","__rg_alloc_zeroed","__rg_dealloc","__rg_realloc","main","main_inner"],"q":[[0,"concurrency"]],"d":["","","","","","","",""],"i":[0,0,0,0,0,0,0,0],"f":[0,0,[[1,1],2],[[1,1],2],[[2,1,1]],[[2,1,1,1],2],[[]],[[3,1],4]],"c":[],"p":[[15,"usize"],[15,"u8"],[3,"String"],[6,"Result"]]},\
"do_query":{"doc":"","t":"WHFFFFFF","n":["","GLOBAL","__rg_alloc","__rg_alloc_zeroed","__rg_dealloc","__rg_realloc","main","main_inner"],"q":[[0,"do_query"]],"d":["","","","","","","",""],"i":[0,0,0,0,0,0,0,0],"f":[0,0,[[1,1],2],[[1,1],2],[[2,1,1]],[[2,1,1,1],2],[[]],[[3,1],4]],"c":[],"p":[[15,"usize"],[15,"u8"],[3,"String"],[6,"Result"]]},\
"do_query_offline":{"doc":"","t":"WHFFFFFF","n":["","GLOBAL","__rg_alloc","__rg_alloc_zeroed","__rg_dealloc","__rg_realloc","main","main_inner"],"q":[[0,"do_query_offline"]],"d":["","","","","","","",""],"i":[0,0,0,0,0,0,0,0],"f":[0,0,[[1,1],2],[[1,1],2],[[2,1,1]],[[2,1,1,1],2],[[]],[[3,1,4],5]],"c":[],"p":[[15,"usize"],[15,"u8"],[3,"String"],[15,"str"],[6,"Result"]]},\
"do_query_scored":{"doc":"","t":"WHFFFFFF","n":["","GLOBAL","__rg_alloc","__rg_alloc_zeroed","__rg_dealloc","__rg_realloc","main","main_inner"],"q":[[0,"do_query_scored"]],"d":["","","","","","","",""],"i":[0,0,0,0,0,0,0,0],"f":[0,0,[[1,1],2],[[1,1],2],[[2,1,1]],[[2,1,1,1],2],[[]],[[3,1],4]],"c":[],"p":[[15,"usize"],[15,"u8"],[3,"String"],[6,"Result"]]},\
"test_fused_primitve":{"doc":"","t":"RFFF","n":["NUM_ITER","bytes_to_chunk","main","vec_to_bytes"],"q":[[0,"test_fused_primitve"]],"d":["","","To test the benefits of pre-compiled short-circuit …",""],"i":[0,0,0,0],"f":[0,[[[2,[[2,[1]]]]],[[2,[3]]]],[[]],[[[2,[[2,[4]]]]],[[2,[[2,[1]]]]]]],"c":[],"p":[[15,"u8"],[3,"Vec"],[4,"Chunk"],[15,"u16"]]},\
"vector_size":{"doc":"","t":"WHFFFFFF","n":["","GLOBAL","__rg_alloc","__rg_alloc_zeroed","__rg_dealloc","__rg_realloc","main","main_inner"],"q":[[0,"vector_size"]],"d":["","","","","","","",""],"i":[0,0,0,0,0,0,0,0],"f":[0,0,[[1,1],2],[[1,1],2],[[2,1,1]],[[2,1,1,1],2],[[]],[[3,1],4]],"c":[],"p":[[15,"usize"],[15,"u8"],[3,"String"],[6,"Result"]]},\
"vector_size_simulate":{"doc":"","t":"RFFF","n":["NUM_ITER","bytes_to_chunk","main","vec_to_bytes"],"q":[[0,"vector_size_simulate"]],"d":["","","To test the benefits of pre-compiled short-circuit …",""],"i":[0,0,0,0],"f":[0,[[[2,[[2,[1]]]]],[[2,[3]]]],[[]],[[[2,[[2,[4]]]]],[[2,[[2,[1]]]]]]],"c":[],"p":[[15,"u8"],[3,"Vec"],[4,"Chunk"],[15,"u16"]]},\
"velosearch":{"doc":"","t":"NCCNDDENCCNCCCDCNNDNLLLLLLLLLLLLMAMALLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLLLLLLLLLLLAAALMMAALLLLLLLLLLLLLLLLLLLALLLLLLGDGDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLFCADLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLADDDLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLLLLMFLLLLLMMMMLMMMMLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLCCCCCCCCAAAAADLLLLLLLLLLLLLLLLLLFLLLLDILLLLLLLLKLLLKLLLLLLLFLLLLDLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLDCCCCALLALLCLALLLLLLLLLLLAFLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNRNENNNDNDNNNNNNENNNRNNDNNENNNNRNNRRNERRENNNENRNRNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMDLLLLLFLLLLLLLLLLLLFLLLLLLLDLLLLLLLLLLLLLLLLLLLLLCDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLCADLLLLLFFLLLLLLLLLLLLLLLLLFCCCCAAANNNNDENNNNNNNEENDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLMLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMMMDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLADDLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCAAAAAACCATLLFFFFLLLLLLLLLLLLLLLLMMLFFGDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNGNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLMLLLLLFFLMFFLLLLFFFF","n":["Base","BooleanContext","BooleanPhysicalPlanner","BooleanQuery","CONCURRENCY","FastArgs","Handler","LoadData","MinOperationRange","PartitionPredicateReorder","PostingTable","PrimitivesCombination","Result","RewriteBooleanPredicate","STEP_LEN","ShortCircuit","SplitBase","SplitO1","TOKENIZER","Tantivy","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","augment_args","augment_args_for_update","base","batch","batch_size","boolean_parser","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","clone","clone_into","cmp","command","command_for_update","compare","context","datasources","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","dump_path","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_cast","from_cast","from_cast","from_cast","from_cast","group_id","handler","index","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","jit","optimizer","parser","partial_cmp","partition_num","path","physical_expr","query","to_owned","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","utils","value_variants","vzip","vzip","vzip","vzip","vzip","BatchFreqs","BatchRange","Freqs","PostingBatch","PostingBatchBuilder","TermMetaBuilder","add_idx","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build_with_idx","cast","cast","cast","cast","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","distribution","doc_len","drop","drop","drop","drop","end","eq","eq","fmt","fmt","from","from","from","from","from_cast","from_cast","from_cast","from_cast","index","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","len","memory_consumption","new","new","new","nums","posting_by_term","project_fold_with_freqs","push_term","range","rle_usage","roaring_predicate","roaring_predicate_with_score","schema","serialize","serialize","serialize","set_true","space_usage","term_dict","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_new_impl","try_new_with_freqs","type_id","type_id","type_id","type_id","valid_bitmap","vzip","vzip","vzip","vzip","boolean","BooleanContext","boolean_context","BooleanContext","as_any","as_any_mut","binary_expr_columns","boolean","boolean_with_provider","borrow","borrow_mut","cast","clone","clone_into","default","deref","deref_mut","drop","from","from_cast","index","index_provider","init","into","into_any","into_any_arc","into_any_rc","new","register_index","session_id","session_start_time","state","to_owned","try_from","try_into","type_id","vzip","with_config","with_config_rt","with_state","posting_table","PostingExec","PostingStream","PostingTable","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","children","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","distri","drop","drop","drop","execute","fmt","fmt_as","from","from","from","from_cast","from_cast","from_cast","idx","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_score","make_posting_schema","memory_consumption","metrics","new","output_ordering","output_partitioning","partition_min_range","partitions","partitions_num","partitions_num","poll_next","predicate","projected_schema","projected_term_meta","projection","scan","schema","schema","schema","schema","serialize","size_hint","stat_of","statistics","stats_of","table_type","term_idx","term_meta_of","term_metas_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","try_new","try_poll_next","type_id","type_id","type_id","vzip","vzip","vzip","with_new_children","BaseHandler","BooleanQueryHandler","HandlerT","PostingHandler","SplitConstruct","SplitHandler","SplitO1","TantivyHandler","boolean_query_handler","handler","posting_handler","splitbase","tantivy_handler","BooleanQueryHandler","as_any","as_any_mut","borrow","borrow_mut","cast","deref","deref_mut","drop","execute","from","from_cast","get_words","init","into","into_any","into_any_arc","into_any_rc","new","register_index","try_from","try_into","type_id","vzip","BaseHandler","HandlerT","as_any","as_any_mut","borrow","borrow_mut","cast","deref","deref_mut","drop","execute","execute","from","from_cast","get_words","get_words","init","into","into_any","into_any_arc","into_any_rc","new","register_table","try_from","try_into","type_id","vzip","PostingHandler","as_any","as_any_mut","borrow","borrow_mut","cast","deref","deref_mut","drop","execute","from","from_cast","get_words","init","into","into_any","into_any_arc","into_any_rc","new","try_from","try_into","type_id","vzip","SplitConstruct","SplitHandler","SplitO1","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","execute","execute","from","from","from","from_cast","from_cast","from_cast","get_words","get_words","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new","new","register_table","split","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","TantivyHandler","as_any","as_any_mut","borrow","borrow_mut","cast","deref","deref_mut","drop","execute","from","from_cast","get_words","init","into","into_any","into_any_arc","into_any_rc","new","try_from","try_into","type_id","vzip","AOT_PRIMITIVES","Assembler","Boolean","BooleanExpr","Expr","api","as_any","as_any_mut","ast","borrow","borrow_mut","build_boolean_query","cast","compile","deref","deref","deref_mut","drop","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","jit","jit_short_circuit","try_from","try_into","type_id","vzip","Assembler","AssemblerState","CodeBlock","FunctionBuilder","GeneratedFunction","add","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","assign","bitiwise_and","bitwise_or","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","call","call_stmt","cast","cast","cast","cast","cast","clone","clone_into","create_jit","declare","declare_as","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","drop","drop","drop","drop","drop","enter_block","eq","fmt","fmt","fresh_name","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","ge","gt","id","if_block","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","le","lit","lit_b","lit_i64","lit_u16","lit_u8","load","lt","mul","ne","new_func_builder","param","register_extern_fn","ret","store","sub","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","while_block","Add","And","Assign","BOOL","Binary","BinaryExpr","BitwiseAnd","BitwiseOr","Bool","Boolean","Boolean","BooleanExpr","BooleanExpr","Call","Call","Declare","Div","Eq","Expr","Ge","Gt","I64","I64","Identifier","IfElse","JITType","Le","Leaf","Literal","Literal","Load","Lt","Mul","NIL","Ne","Or","PTR","PTR_SIZE","Parsing","Predicate","R32","R64","Stmt","Store","Sub","Typed","TypedLit","U16","U16","U8","U8","WhileLoop","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_ident","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_hash","get_type","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","native","predicate","start_idx","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","args","args","idx","Louds2Boolean","as_any","as_any_mut","borrow","borrow_mut","build","build_boolean_query","cast","deref","deref_mut","drop","fmt","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","jit_short_circuit_primitive","leaf_num","new","recursive_construct","try_from","try_into","type_id","vzip","JIT","as_any","as_any_mut","borrow","borrow_mut","cast","compile","default","deref","deref_mut","drop","from","from_cast","init","into","into_any","into_any_rc","new","try_from","try_into","type_id","vzip","BooleanPhysicalPlanner","MinOperationRange","PartitionPredicateReorder","PrimitivesCombination","PushDownProjection","RewriteBooleanPredicate","apply_order","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","name","name","name","name","name","new","new","new","new","new","optimize","optimize","optimize","planner","schema_check","schema_check","schema_check","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_optimize","try_optimize","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","BooleanPhysicalPlanner","boolean_planner","BooleanPhysicalPlanner","as_any","as_any_mut","borrow","borrow_mut","cast","create_aggregate_expr","create_aggregate_expr_with_name","create_physical_expr","create_physical_plan","default","deref","deref_mut","drop","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","vzip","boolean","BooleanEvalExpr","CountValid","Primitives","ShortCircuit","boolean_eval","count_udf","short_circuit_primitives","And","Bitmap","Bitmap","BitwisePrimitive","BooleanEvalExpr","Chunk","ColumnPrimitive","IDs","IDs","Leaf","N0NE","N0NE","Or","PhysicalPredicate","Primitives","ShortCircuitPrimitive","SubPredicate","TempChunk","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","children","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cs","data_type","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eval_avx512","eval_bitmap","eval_roaring","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freqs_filter","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","leaf_num","leaf_num","new","new","new_with_predicate","node_num","node_num","nullable","predicate","rank","rank","sel","selectivity","sub_predicate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","valid_idx","vzip","vzip","vzip","vzip","vzip","vzip","with_new_children","args","args","primitive","CountValid","as_any","as_any_mut","borrow","borrow_mut","cast","deref","deref_mut","drop","evaluate","fmt","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","merge_batch","new","retract_batch","size","state","try_from","try_into","type_id","update_batch","vzip","ShortCircuit","as_any","as_any","as_any_mut","batch_idx","borrow","borrow_mut","cast","children","clone","clone_into","data_type","deref","deref_mut","drop","eq","eval","eval_avx512","evaluate","fmt","fmt","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","new","nullable","to_owned","to_string","try_from","try_into","try_new","type_id","vzip","with_new_children","boolean_query","BooleanPredicateBuilder","BooleanQuery","as_any","as_any","as_any_mut","as_any_mut","binary_expr_columns","boolean_predicate","boolean_project","borrow","borrow","borrow_mut","borrow_mut","build","cast","cast","clone","clone_into","collect","count_agg","create_physical_plan","deref","deref","deref_mut","deref_mut","drop","drop","explain","fmt","from","from","from_cast","from_cast","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","must","new","should","show","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_must","with_should","FastErr","Result","UnalignedBitChunk","array","avx512","builder","chunk","err","json","parse_wiki_file","to_hashmap","vec","U64x8","as_any","as_any_mut","bitwise_and","bitwise_and_batch","bitwise_or","bitwise_or_batch","borrow","borrow_mut","cast","deref","deref_mut","drop","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","vals","vector","vzip","deserialize_posting_table","serialize_term_meta","RanyonParIter","UnalignedBitChunk","UnalignedBitChunkIterator","as_any","as_any_mut","borrow","borrow_mut","cast","chunks","count_ones","deref","deref_mut","drop","fmt","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","into_par_iter","iter","lead_padding","new","prefix","suffix","trailing_padding","try_from","try_into","type_id","vzip","ArrowErr","ConvertErr","DataFusionErr","FastErr","InternalErr","IoError","JitErr","Result","SerdeErr","TantivyErr","UnimplementErr","as_any","as_any_mut","as_fail","backtrace","borrow","borrow_mut","cast","cause","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from_cast","init","into","into_any","into_any_arc","into_any_rc","name","to_string","try_from","try_into","type_id","vzip","WikiItem","as_any","as_any_mut","borrow","borrow_mut","cast","deref","deref_mut","deserialize","drop","from","from_cast","id","init","into","into_any","into_any_arc","into_any_rc","parse_wiki_dir","parse_wiki_file","serialize","text","to_hashmap","to_hashmap_v2","try_from","try_into","type_id","vzip","copy_advance_aligned","set_vec_len_by_ptr","store_advance","store_advance_aligned"],"q":[[0,"velosearch"],[159,"velosearch::batch"],[289,"velosearch::boolean_parser"],[290,"velosearch::context"],[292,"velosearch::context::boolean_context"],[329,"velosearch::datasources"],[330,"velosearch::datasources::posting_table"],[435,"velosearch::index"],[448,"velosearch::index::boolean_query_handler"],[472,"velosearch::index::handler"],[499,"velosearch::index::posting_handler"],[522,"velosearch::index::splitbase"],[591,"velosearch::index::tantivy_handler"],[614,"velosearch::jit"],[645,"velosearch::jit::api"],[784,"velosearch::jit::ast"],[1080,"velosearch::jit::ast::Predicate"],[1083,"velosearch::jit::compile"],[1110,"velosearch::jit::jit"],[1132,"velosearch::optimizer"],[1258,"velosearch::optimizer::planner"],[1260,"velosearch::optimizer::planner::boolean_planner"],[1285,"velosearch::parser"],[1286,"velosearch::physical_expr"],[1293,"velosearch::physical_expr::boolean_eval"],[1477,"velosearch::physical_expr::boolean_eval::PhysicalPredicate"],[1480,"velosearch::physical_expr::count_udf"],[1508,"velosearch::physical_expr::short_circuit_primitives"],[1546,"velosearch::query"],[1547,"velosearch::query::boolean_query"],[1605,"velosearch::utils"],[1617,"velosearch::utils::avx512"],[1643,"velosearch::utils::builder"],[1645,"velosearch::utils::chunk"],[1677,"velosearch::utils::err"],[1720,"velosearch::utils::json"],[1748,"velosearch::utils::vec"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","file path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The doc_id range [start, end) Batch range determines the  …","","A batch of Postinglist which contain serveral terms, which …","","","","","","","","","","","","Return the length of this partition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get the <code>end</code> of BatchRange","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Get a reference to a term’s posting by name","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","get the <code>len</code> of BatchRange","","new a BatchRange","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return BooleanQuery with index and predicate","Without provider overhide","","","","","","","","","","Returns the argument unchanged.","","Retrieves a [<code>Index</code>] representing a table previously …","Return a [<code>IndexProvider</code>] for the specified table.","","Calls <code>U::from(self)</code>.","","","","","Register a <code>TableProvider</code> as a table that can be referenced …","Return the session_id","Return the session_start_time","Snapshots the <code>SessionState</code> of this <code>BooleanContext</code> setting …","","","","","","Creates a new session context using the provided session …","Creates a new session context using the provided …","Creates a new session context using the provided session …","","","","","","","","","Return a reference to Any that can be used for downcasting","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Get the output partitioning of this plan","","","","","","","","","","","","Get the schema","Get the schema for this execution plan","","","","","","","","","Get TermMeta From &amp;str","Get TermMeta From &amp;&amp;str","","","","","","","","Create an iterator for a vector of record batches","Create a new execution plan for reading in-memory record …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Constructing a function AST at runtime","","","","","","","","Compile Expr to JIT’d function","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","The very first step for constructing a function at runtime","State pf Assembler, keep tracking of generated function …","Code block consists of statements and acts as anonymous …","Function builder API. Stores the state while we are …","A function consisting of AST nodes that JIT can compile.","Binary arithmetic expression: lhs + rhs","","","","","","","","","","","Assignment statement. Assign a expression value to a …","Binary arithmetic expression: lhs &amp; rhs","Binary arithmetic expression: lsh | rhs","","","","","","","","","","","","Call external function <code>name</code> with parameters","Call external function for side effect only.","","","","","","","","Create JIT env which we could compile the AST of …","Declare variable <code>name</code> of a type","Declare variable with initialization.","","","","","","","","","","","","","Binary arithmetic expression: lhs / rhs","","","","","","Enter the function body at start the building.","Binary comparison expression: lhs == rhs","","","Create a fresh function name with prefix <code>name</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Binary comparison expression: lhs &gt;= rhs","Binary comparison expression: lhs &gt; rhs","Create a reference to an already defined variable.","Construct a <code>if-then-else</code> block with each part provided.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Binary comparison expression: lhs &lt;= rhs","Create a literal <code>val</code> of <code>ty</code> type.","Shorthand to create boolean literal","Shorthand to create i64 literal","Shorthand to create u16 literal","Shorthand to create u8 literal","Return the value pointed to by the ptr stored in <code>ptr</code>","Binary comparison expression: lhs &lt; rhs","Binary arithmetic expression: lhs * rhs","Binary comparison expression: lhs != rhs","Create a new FunctionBuilder with “name” prefix","Add one more parameter to the function.","Register and external Rust function to make it accessible …","Set return type for the function. Functions are of <code>void</code> …","Store the value in <code>value</code> to the address in <code>ptr</code>","Binary arithmetic expression: lhs - rhs","","","","","","","","","","","","","","","","","","","","","","","Construct a <code>while</code> block with each part provided.","add","","assignment","bool, use u8 as bool","Binary Expression","Binary Expression","Bitwise and","Bitwise or","","","Boolean Expression V2","","Boolean Expression","call function for side effect","call function expression","declare a new variable of type","divide","==","Expression","=","","","integer of 8 bytes","Variable","if-then-else","Type to be used in JIT","&lt;=","","Literal","Literal","Load a value from pointer","&lt;","multiply","null type as placeholder","!=","","The pointer type to use based on our currently target.","","Parsable literal with type","","","Pointer type of 64 bits","Statement","store value (the first expr) tp an address (the second …","subtract","Shorthand literals of common types","Shorthand typed literals","","U16","","u8","while","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","print the statement with indentation","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The cranelift type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The basic JIT class","","","","","","Compile the generated function into machine code.","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","New while registering external functions","","","","","","Pruning invalid batches transform rule that gets the …","PartitionPredicateReorder optimizer that reorder the …","PrimitivesCombination transform rule that optimizes the …","Optimizer that remove unused projections from plans","Optimizer pass that rewrites predicates of the form","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boolean physical query planner that converts a <code>LogicalPlan</code> …","","","","","","Create an aggregate expression from a logical expression …","Create an aggregate expression with a name from a logical …","","Create a physical plan from a logical plan","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","<code>And</code> Level","","","","Combined Primitives Expression","","","","","Leaf","","","<code>Or</code> Level","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The cumulative selectivity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Leaf num","","","","","Node num","","","","The rank of this node, calculate by $$\\\\frac{sel - …","","The selectivity of this node","The children nodes of physical predicate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Count","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","new count accumulator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","A query that matches documents matching boolean …","BooleanQuery represents a full-text search query.","","","","","","Create BooleanQuery based on a bitwise binary operation …","","","","","","","","","","","Convert the logical plan represented by this BooleanQuery …","Count query","Create a physical plan","","","","","","","Return a BooleanQuery with the explanation of its plan so …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Create a new BooleanQuery","","Print results","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Iterates over an arbitrarily aligned byte buffer","","","","","","","","Counts the number of ones","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Create a from a byte array, and and an offset and length …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Safety","Safety","Safety","Safety"],"i":[3,0,0,3,0,0,0,3,0,0,3,0,0,0,0,0,3,3,0,3,6,8,10,12,3,6,8,10,12,3,12,12,12,0,12,0,6,8,10,12,3,6,8,10,12,3,6,8,10,12,3,3,3,3,12,12,3,0,0,6,6,8,8,10,10,12,3,6,8,10,12,3,6,8,10,12,3,12,3,3,3,3,3,12,3,6,8,10,12,3,12,12,6,8,10,12,3,12,12,0,6,8,10,12,3,6,8,10,12,3,6,8,10,12,3,6,8,10,12,3,6,8,10,12,3,0,0,0,3,12,12,0,0,3,3,6,8,10,12,3,6,8,10,12,3,6,8,10,12,3,12,12,0,3,6,8,10,12,3,0,0,0,0,0,0,26,35,28,29,26,35,28,29,26,28,35,28,29,26,35,28,29,26,29,26,29,35,28,29,26,35,28,26,35,28,26,35,28,29,26,35,28,29,26,35,29,26,26,29,35,28,29,26,35,35,28,35,28,35,28,29,26,35,28,29,26,28,35,28,29,26,35,28,29,26,35,28,29,26,35,28,26,35,28,29,26,35,28,35,29,26,26,28,28,29,28,26,28,28,28,35,29,26,26,28,29,35,28,26,35,28,29,26,35,28,29,26,28,28,28,35,28,29,26,26,35,28,29,26,0,0,0,0,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,63,63,73,64,64,63,73,64,63,73,64,63,73,64,63,73,64,64,64,64,63,73,64,63,73,64,64,63,73,64,64,64,64,63,73,64,63,73,64,64,63,73,64,63,73,64,63,73,64,63,73,64,63,73,64,64,0,63,64,63,64,64,64,64,63,64,73,64,64,64,64,63,63,73,64,64,63,73,63,64,63,63,64,64,64,64,63,73,64,63,73,64,73,64,73,63,73,64,63,73,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,82,82,82,82,0,0,83,83,83,83,83,83,83,83,159,83,83,83,159,83,83,83,83,83,83,83,0,83,83,83,83,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,0,0,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,86,87,86,87,88,86,87,88,86,87,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,86,87,88,0,88,86,87,88,86,87,88,86,87,88,86,87,88,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,0,0,90,90,0,90,90,0,90,0,90,90,90,90,90,90,90,90,90,90,90,0,0,90,90,90,90,0,0,0,0,0,93,96,100,93,95,99,96,100,93,95,99,93,93,93,96,100,93,95,99,96,100,93,95,99,93,93,93,96,100,93,95,99,95,95,96,93,93,96,99,96,100,93,95,99,96,100,93,95,99,93,96,100,93,95,99,100,93,95,95,99,96,100,93,95,99,96,100,93,95,99,93,93,93,93,96,100,93,95,99,96,100,93,95,99,96,100,93,95,99,95,96,100,93,95,99,93,93,93,93,93,93,93,93,93,93,96,100,96,100,93,93,95,95,96,100,93,95,99,96,100,93,95,99,96,100,93,95,99,96,100,93,95,99,93,107,108,104,0,94,0,107,107,105,0,94,0,94,104,94,104,107,107,0,107,107,105,0,94,104,0,107,108,0,94,94,107,107,0,107,108,0,0,106,0,0,0,0,104,107,106,0,105,0,105,0,104,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,98,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,105,94,98,106,107,108,92,109,98,98,98,98,104,104,105,105,94,94,98,98,106,106,107,107,108,92,92,109,109,104,104,105,94,98,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,98,94,98,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,98,92,92,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,104,105,94,98,106,107,108,92,109,160,161,162,0,114,114,114,114,114,0,114,114,114,114,114,114,114,114,114,114,114,114,0,114,114,114,114,114,114,114,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,0,0,0,0,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,121,116,118,119,120,0,118,119,120,118,119,120,121,116,118,119,120,121,116,121,116,118,119,120,121,116,118,119,120,121,116,0,0,0,128,128,128,128,128,0,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,0,0,0,0,0,134,131,132,130,0,0,130,131,132,134,131,132,134,0,0,130,0,0,130,131,132,133,134,43,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,43,130,131,132,133,134,43,130,131,132,133,134,43,133,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,43,134,43,134,43,130,131,132,133,134,43,43,0,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,133,133,133,43,133,133,133,43,43,133,133,133,133,133,130,131,132,133,134,43,43,130,131,132,133,134,43,130,131,132,133,134,43,130,131,132,133,134,43,43,130,131,132,133,134,43,43,163,164,165,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,0,0,0,142,55,142,55,0,55,0,142,55,142,55,142,142,55,55,55,55,55,55,142,55,142,55,142,55,55,55,142,55,142,55,142,55,142,55,142,55,142,55,142,55,142,55,142,55,55,142,55,142,55,142,55,142,55,142,142,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,0,0,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,0,0,0,0,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,148,148,148,0,148,148,148,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,0,0,156,156,0,0,156,156,156,156,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,2],[2,2],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[]],[[3,3],4],[[],2],[[],2],[[],4],0,0,[5],[6,7],[5],[8,[[9,[5]]]],[10,[[9,[5]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,[[3,3],11],[[],11],[[],11],[[],11],[[],11],[[12,13],14],[[3,13],14],[[]],[[]],[[]],[[]],[[]],[15,[[17,[12,16]]]],[15,[[17,[12,16]]]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[18]]]],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],0,0,0,[[3,3],[[19,[4]]]],0,0,0,0,[[]],[3,[[19,[24]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],25],[[],25],[[],25],[[],25],[[],25],[[12,15],[[17,[16]]]],[[12,15],[[17,[16]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[26,27,5]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[28,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,[[30,[28]]]],[26,31],[[29,[19,[[34,[[33,[32,26]]]]]],5],[[30,[28]]]],[[]],[[]],[[]],[[]],[35,35],[28,28],[26,26],[[]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[36,[[17,[35]]]],[36,[[17,[29]]]],[36,[[17,[26]]]],0,[29,5],[5],[5],[5],[5],[35,27],[[35,35],11],[[28,28],11],[[35,13],14],[[28,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,37]],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[35,27],[28],[[27,27],35],[[],29],[[5,5],26],0,[[28,37],[[19,[[39,[38]]]]]],[[28,40,5,41],[[30,[42]]]],[[29,32,27],30],[28,35],[26,5],[[28,43],[[30,[5]]]],[[28,44,43],[[30,[27]]]],[28,40],[[35,45],17],[[29,45],17],[[26,45],17],[[26,5,5,27]],[28,5],0,[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[40,[46,[[22,[[39,[38]]]]]],[46,[[46,[47]]]],[22,[35]]],[[30,[28]]]],[[40,[46,[[22,[[39,[38]]]]]],[19,[48]],[46,[[46,[47]]]],[22,[35]]],[[30,[28]]]],[[40,[46,[[22,[[39,[38]]]]]],48,[46,[[46,[47]]]],[22,[35]]],[[30,[28]]]],[[],25],[[],25],[[],25],[[],25],0,[[]],[[]],[[]],[[]],[37,[[17,[49,50]]]],0,0,0,[[],1],[[],1],[49,[[46,[51]]]],[[52,[54,[53]],49,11],[[30,[55]]]],[[52,[22,[56]],44,49,11],[[30,[55]]]],[[]],[[]],[[]],[52,52],[[]],[[],52],[5],[5],[5],[[]],[[]],[[52,[54,[53]]],[[30,[55]]]],[[52,[54,[53]]],[[30,[[22,[57]]]]]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[[],52],[[52,[54,[53]],[22,[57]]],[[30,[[19,[[22,[57]]]]]]]],[52,32],[52,[[59,[58]]]],[52,60],[[]],[[],17],[[],17],[[],25],[[]],[61,52],[[61,[22,[62]]],52],[60,52],0,0,0,0,[63,1],[[],1],[[],1],[[],1],[64,1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,[[46,[[22,[65]]]]]],[64,64],[[]],[5],[5],[5],[5],[5],[5],0,[5],[5],[5],[[64,5,[22,[66]]],[[68,[67]]]],[[64,13],14],[[64,69,13],14],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],0,[[[46,[37]]],44],[63,5],[64,[[19,[70]]]],[[40,[22,[[71,[31]]]],[46,[[22,[28]]]],35,5],63],[64,19],[64,72],0,0,0,0,[[[74,[73]],75],[[76,[19]]]],0,0,0,0,[[63,60,[19,[[46,[5]]]],[19,[5]]],[[74,[[21,[77]]]]]],[63,40],[73,40],[64,40],0,[[63,45],17],[73],[[63,37,5],[[19,[31]]]],[64,78],[[63,5],[[46,[[19,[31]]]]]],[63,79],0,[[64,37],[[19,[31]]]],[64,[[46,[[19,[31]]]]]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[22,[28]],40,[22,[80]],[46,[[19,[[22,[80]]]]]],[46,[[19,[27]]]],[19,[43]],11,[81,[5]]],[[68,[73]]]],[[[46,[[22,[28]]]],[22,[[71,[31]]]],40,[19,[[46,[5]]]],[19,[[22,[80]]]],[46,[[19,[31]]]],5],[[68,[64]]]],[[74,75],[[76,[[19,[17]]]]]],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[[22,[64]],[46,[[22,[65]]]]],[[68,[[22,[65]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[]],[[]],[[]],[5],[5],[5],[82,[[74,[[21,[77]]]]]],[[]],[[]],[[82,27],[[46,[32]]]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[37,82],[[37,[46,[42]],52],[[30,[[19,[[22,[57]]]]]]]],[[],17],[[],17],[[],25],[[]],0,0,[[],1],[[],1],[[]],[[]],[[]],[5],[5],[5],[[],[[74,[[21,[77]]]]]],[83,[[74,[[21,[77]]]]]],[[]],[[]],[27,[[46,[32]]]],[[83,27],[[46,[32]]]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[37,83],[[37,[46,[42]],84],[[30,[[19,[[22,[57]]]]]]]],[[],17],[[],17],[[],25],[[]],0,[[],1],[[],1],[[]],[[]],[[]],[5],[5],[5],[85,[[74,[[21,[77]]]]]],[[]],[[]],[[85,27],[[46,[32]]]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[[32,[46,[32]],5,27,[19,[32]]],85],[[],17],[[],17],[[],25],[[]],0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[86,[[74,[[21,[77]]]]]],[87,[[74,[[21,[77]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[86,27],[[46,[32]]]],[[87,27],[[46,[32]]]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[37,86],[37,87],[37,88],[[37,[46,[42]],84],[[30,[[19,[[22,[57]]]]]]]],[[88,37],30],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],25],[[],25],[[],25],[[]],[[]],[[]],0,[[],1],[[],1],[[]],[[]],[[]],[5],[5],[5],[89,[[74,[[21,[77]]]]]],[[]],[[]],[[89,27],[[46,[32]]]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[[32,[46,[32]],5],[[30,[89]]]],[[],17],[[],17],[[],25],[[]],0,0,0,0,0,0,[[],1],[[],1],0,[[]],[[]],0,[[]],0,[5],[90,[[91,[27]]]],[5],[5],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],0,[[92,5],30],[[],17],[[],17],[[],25],[[]],0,0,0,0,0,[[93,94,94],[[30,[94]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[93,[54,[32]],94],30],[[93,94,94],[[30,[94]]]],[[93,94,94],[[30,[94]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,95],[[93,[54,[32]],[46,[94]]],[[30,[94]]]],[[93,[54,[32]],[46,[94]]],30],[[]],[[]],[[]],[[]],[[]],[95,95],[[]],[96,97],[[93,[54,[32]],98],30],[[93,[54,[32]],94],30],[[],96],[[],99],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[93,94,94],[[30,[94]]]],[5],[5],[5],[5],[5],[100,93],[[93,94,94],[[30,[94]]]],[[95,13],14],[[95,13],14],[[99,[54,[32]]],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[93,94,94],[[30,[94]]]],[[93,94,94],[[30,[94]]]],[[93,[54,[32]]],[[30,[94]]]],[[93,101,101,101],30],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[[93,94,94],[[30,[94]]]],[[93,[54,[32]],98],94],[[93,[54,[102]]],94],[[93,[54,[103]]],94],[[93,[54,[47]]],94],[[93,[54,[102]]],94],[[93,94,98],[[30,[94]]]],[[93,94,94],[[30,[94]]]],[[93,94,94],[[30,[94]]]],[[93,94,94],[[30,[94]]]],[[96,[54,[32]]],100],[[100,[54,[32]],98],100],[[96,[54,[32]],102,[46,[98]],[19,[98]]],30],[[100,[54,[32]],98],100],[[93,94,94],30],[[93,94,94],[[30,[94]]]],[[]],[[],32],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[93,101,101],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[104,104],[105,105],[94,94],[98,98],[106,106],[107,107],[108,108],[92,92],[109,109],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[105,105],11],[[94,94],11],[[98,98],11],[[106,106],11],[[107,107],11],[[108,108],11],[[92,92],11],[[109,109],11],[[],11],[[],11],[[],11],[[],11],[[104,13],14],[[104,13],14],[[105,13],14],[[105,13],14],[[94,13],14],[[94,13],14],[[98,13],14],[[98,13],14],[[106,13],14],[[106,13],14],[[107,13],14],[[107,13],14],[[108,13],14],[[92,13],14],[[92,13],14],[[109,13],14],[[109,13],14],[[104,5,13],14],[[]],[[]],[[]],[[]],[37,98],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[110,111]],112],41],[94,98],[[98,113]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],1],[[],1],[[]],[[]],[114,[[19,[92]]]],[[96,94],[[30,[95]]]],[[]],[5],[5],[5],[[114,13],14],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[[96,92,5,27],[[30,[95]]]],[114,5],[27,114],[[114,5,11],[[17,[[19,[108]]]]]],[[],17],[[],17],[[],25],[[]],0,[[],1],[[],1],[[]],[[]],[[]],[[97,95],[[30,[102]]]],[[],97],[5],[5],[5],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[23,[[23,[1]]]],[115,97],[[],17],[[],17],[[],25],[[]],0,0,0,0,0,0,[116,[[19,[117]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],118],[[],119],[[],120],[[],121],[[],116],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[118,37],[119,37],[120,37],[121,37],[116,37],[[],118],[[],119],[[],120],[[],121],[[],116],[[118,[22,[65]],122],[[68,[[22,[65]]]]]],[[119,[22,[65]],122],[[68,[[22,[65]]]]]],[[120,[22,[65]],122],[[68,[[22,[65]]]]]],0,[118,11],[119,11],[120,11],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[121,123,124],[[68,[[19,[123]]]]]],[[116,123,124],[[68,[[19,[123]]]]]],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],1],[[],1],[[]],[[]],[[]],[[49,125,44,126],[[68,[[22,[127]]]]]],[[49,[54,[32]],125,44,126],[[68,[[22,[127]]]]]],[[128,49,125,44,60],[[68,[[22,[129]]]]]],[[128,123,60],[[74,[[21,[77]]]]]],[[],128],[5],[5],[5],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[[],17],[[],17],[[],25],[[]],[37,[[17,[49,50]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[43,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[46,[[22,[129]]]]]],[130,130],[131,131],[132,132],[133,133],[134,134],[43,43],[[]],[[]],[[]],[[]],[[]],[[]],0,[[43,44],[[68,[135]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[43,1],11],[[134,[46,[[19,[[46,[131]]]]]],[19,[[46,[132]]]],11,5],[[68,[[19,[[46,[132]]]]]]]],[43,[[68,[[22,[80]]]]]],[134,[[68,[[22,[80]]]]]],[[43,42],[[68,[136]]]],[[130,13],14],[[131,13],14],[[132,13],14],[[133,13],14],[[134,13],14],[[43,13],14],[[43,13],14],[[[46,[[19,[[46,[19]]]]]],5],[[46,[[22,[137]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[133,5],0,[[134,5,5,138,138,138],133],[[[19,[134]]],43],[134,133],[133,5],0,[[43,44],[[68,[11]]]],0,[133,138],0,[133,138],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[43]],[46,[[22,[129]]]]],[[68,[[22,[129]]]]]],0,0,0,0,[[],1],[[],1],[[]],[[]],[[]],[5],[5],[5],[139,[[68,[140]]]],[[139,13],14],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[139,68],[[],139],[139,68],[139,5],[139,[[68,[[46,[140]]]]]],[[],17],[[],17],[[],25],[139,68],[[]],0,[[],1],[141,1],[[],1],0,[[]],[[]],[[]],[141,[[46,[[22,[129]]]]]],[141,141],[[]],[[141,44],[[68,[135]]]],[5],[5],[5],[[141,1],11],[[141,42],[[46,[102]]]],[[141,[19,[[46,[132]]]],[46,[[19,[[46,[131]]]]]],5],[[46,[132]]]],[[141,42],[[68,[136]]]],[[141,13],14],[[141,13],14],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[[[46,[134]],5,5],141],[[141,44],[[68,[11]]]],[[]],[[],32],[[],17],[[],17],[[[46,[5]],108,5,5,5],[[30,[141]]]],[[],25],[[]],[[[22,[141]],[46,[[22,[129]]]]],[[68,[[22,[129]]]]]],0,0,0,[[],1],[[],1],[[],1],[[],1],[49,[[46,[49]]]],[[55,49,11],[[30,[55]]]],[[123,115,125],[[68,[123]]]],[[]],[[]],[[]],[[]],[142,49],[[]],[[]],[55,55],[[]],[55,[[30,[[46,[42]]]]]],[55,[[30,[55]]]],[55,[[30,[[22,[65]]]]]],[5],[5],[5],[5],[5],[5],[[55,11,11],[[30,[55]]]],[[55,13],14],[[]],[[]],[[]],[[]],[[],5],[[],5],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[[],[[30,[142]]]],[[123,60],55],[[],[[30,[142]]]],[55,30],[[]],[[],17],[[],17],[[],17],[[],17],[[],25],[[],25],[[]],[[]],[[142,142],[[30,[142]]]],[[142,142],[[30,[142]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[]],[[],143],[[]],[[],143],[[]],[[]],[[]],[5],[5],[5],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[[],17],[[],17],[[],25],0,0,[[]],[[32,5],[[19,[63]]]],[[[46,[31]],32]],0,0,0,[[],1],[[],1],[[]],[[]],[[]],[144],[144,5],[5],[5],[5],[[144,13],14],[[]],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[144,145],[144,146],[144,5],[[5,5],144],[144,[[19,[41]]]],[144,[[19,[41]]]],[144,5],[[],17],[[],17],[[],25],[[]],0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],147],[148,[[19,[149]]]],[[]],[[]],[[]],[148,[[19,[147]]]],[5],[5],[5],[[148,13],14],[[148,13],14],[150,148],[151,148],[152,148],[153,148],[154,148],[[]],[155,148],[[]],[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[148,[[19,[37]]]],[[],32],[[],17],[[],17],[[],25],[[]],0,[[],1],[[],1],[[]],[[]],[[]],[5],[5],[36,[[17,[156]]]],[5],[[]],[[]],0,[[],5],[[]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[37,[[30,[[46,[156]]]]]],[157,[[30,[[46,[156]]]]]],[[156,45],17],0,[[[46,[27]],[46,[32]],27,5],[[91,[32,[46,[[46,[158]]]]]]]],[[[46,[27]],[46,[32]],27,5],[[91,[32,[46,[[46,[158]]]]]]]],[[],17],[[],17],[[],25],[[]],[5],[46],[102],[[]]],"c":[],"p":[[8,"Any"],[3,"Command"],[4,"Handler"],[4,"Ordering"],[15,"usize"],[3,"TOKENIZER"],[3,"TextAnalyzer"],[3,"STEP_LEN"],[3,"Mutex"],[3,"CONCURRENCY"],[15,"bool"],[3,"FastArgs"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"PossibleValue"],[3,"TypeId"],[3,"TermMetaBuilder"],[15,"u32"],[3,"PostingBatch"],[3,"PostingBatchBuilder"],[6,"Result"],[3,"TermMeta"],[3,"String"],[3,"BTreeMap"],[3,"RefCell"],[3,"BatchRange"],[8,"Deserializer"],[15,"str"],[15,"i32"],[6,"GenericBinaryArray"],[6,"SchemaRef"],[15,"u64"],[3,"RecordBatch"],[3,"BooleanEvalExpr"],[3,"Schema"],[8,"Serializer"],[3,"Vec"],[15,"u16"],[6,"BatchFreqs"],[4,"Expr"],[3,"ParseError"],[3,"Column"],[3,"BooleanContext"],[4,"TableReference"],[8,"Into"],[3,"BooleanQuery"],[8,"TableSource"],[8,"TableProvider"],[3,"Utc"],[3,"DateTime"],[3,"SessionState"],[3,"SessionConfig"],[3,"RuntimeEnv"],[3,"PostingTable"],[3,"PostingExec"],[8,"ExecutionPlan"],[3,"TaskContext"],[6,"SendableRecordBatchStream"],[6,"Result"],[4,"DisplayFormatType"],[3,"MetricsSet"],[6,"TermIdx"],[4,"Partitioning"],[3,"PostingStream"],[3,"Pin"],[3,"Context"],[4,"Poll"],[8,"Future"],[3,"Statistics"],[4,"TableType"],[3,"RoaringBitmap"],[3,"Range"],[3,"BooleanQueryHandler"],[3,"BaseHandler"],[3,"SessionContext"],[3,"PostingHandler"],[3,"SplitHandler"],[3,"SplitO1"],[3,"SplitConstruct"],[3,"TantivyHandler"],[3,"AOT_PRIMITIVES"],[3,"HashMap"],[3,"Boolean"],[3,"CodeBlock"],[4,"Expr"],[3,"GeneratedFunction"],[3,"Assembler"],[3,"JIT"],[3,"JITType"],[3,"AssemblerState"],[3,"FunctionBuilder"],[8,"FnMut"],[15,"u8"],[15,"i64"],[4,"Stmt"],[4,"TypedLit"],[4,"Literal"],[4,"BinaryExpr"],[4,"Predicate"],[3,"BooleanExpr"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[3,"Louds2Boolean"],[8,"IntoIterator"],[3,"RewriteBooleanPredicate"],[4,"ApplyOrder"],[3,"MinOperationRange"],[3,"PartitionPredicateReorder"],[3,"PrimitivesCombination"],[3,"PushDownProjection"],[3,"ConfigOptions"],[4,"LogicalPlan"],[8,"OptimizerConfig"],[3,"DFSchema"],[3,"ExecutionProps"],[8,"AggregateExpr"],[3,"BooleanPhysicalPlanner"],[8,"PhysicalExpr"],[4,"Primitives"],[4,"Chunk"],[4,"TempChunk"],[3,"SubPredicate"],[4,"PhysicalPredicate"],[4,"DataType"],[4,"ColumnarValue"],[6,"UInt8Array"],[15,"f64"],[3,"CountValid"],[4,"ScalarValue"],[3,"ShortCircuit"],[3,"BooleanPredicateBuilder"],[3,"__m512i"],[3,"UnalignedBitChunk"],[6,"RanyonParIter"],[6,"UnalignedBitChunkIterator"],[8,"Fail"],[4,"FastErr"],[3,"Backtrace"],[4,"TantivyError"],[4,"ArrowError"],[4,"Infallible"],[3,"Error"],[4,"DataFusionError"],[3,"Error"],[3,"WikiItem"],[3,"Path"],[15,"i8"],[8,"HandlerT"],[13,"And"],[13,"Or"],[13,"Leaf"],[13,"And"],[13,"Or"],[13,"Leaf"],[19,"U64x8"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
